name: Build, Test, and Publish Image

on:
  push:
    branches: [main] # Adjust branches as needed

jobs:
  tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up GoLang
        uses: actions/setup-go@v2
        with:
          go-version: "1.23"

      - name: test with coverage
        run: |
          go mod download
          go test -covermode=atomic -coverprofile=coverage.out ./...

      - name: Build binary
        run: CGO_ENABLED=0 go build -o main cmd/main/main.go

      - name: Upload built binary
        uses: actions/upload-artifact@v4.6.0
        with:
          name: main
          path: main

      - name: SonarCloud Scan
        uses: SonarSource/sonarqube-scan-action@v4.2.1
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@v1.1.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: https://sonarcloud.io

  build:
    runs-on: ubuntu-latest
    needs: [tests]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download built binary
        uses: actions/download-artifact@v4.1.8
        with:
          name: main

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: |
            ghcr.io/jaimendo99/zeppelin-backend:latest
            ghcr.io/jaimendo99/zeppelin-backend:${{ github.sha }}

  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Notify deployment via Coolify
        run: |
          curl -X GET "http://62.146.226.103:8000/api/v1/deploy?uuid=${{ secrets.RESOURCE_UUID }}&force=false" \
          -H "Authorization: Bearer ${{ secrets.COOLIFY_TOKEN }}"
